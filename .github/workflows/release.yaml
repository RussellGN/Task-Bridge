name: "Build & Publish Release"

on:
   push:
      tags: v*
env:
   CLIENT_ID: ${{ secrets.CLIENT_ID}}
   CLIENT_SECRET: ${{ secrets.CLIENT_SECRET}}
   PROCEED_TO_AUTH_URI: ${{secrets.PROCEED_TO_AUTH_URI }}
   FINNISH_AUTH_URI: ${{secrets.FINNISH_AUTH_URI }}
   RELEASE_BODY: ""

jobs:
   publish-tauri:
      permissions:
         contents: write
      strategy:
         fail-fast: false
         matrix:
            include:
               - platform: "macos-latest"
                 args: "--target aarch64-apple-darwin"
               - platform: "macos-latest"
                 args: "--target x86_64-apple-darwin"
               - platform: "ubuntu-22.04"
                 args: ""
               - platform: "windows-latest"
                 args: ""

      runs-on: ${{ matrix.platform }}
      steps:
         - uses: actions/checkout@v4

         - name: install dependencies (ubuntu only)
           if: matrix.platform == 'ubuntu-22.04'
           run: |
              sudo apt-get update
              sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

         - name: install pnpm
           uses: pnpm/action-setup@v4
           with:
              version: latest

         - name: setup node
           uses: actions/setup-node@v4
           with:
              node-version: lts/*
              cache: "pnpm"

         - name: install Rust stable
           uses: dtolnay/rust-toolchain@stable
           with:
              targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

         - name: Rust cache
           uses: swatinem/rust-cache@v2
           with:
              workspaces: "./src-tauri -> target"

         - name: Create .env file for Vite
           run: |
              echo VITE_CLIENT_ID=${{secrets.CLIENT_ID }} >> .env
              echo VITE_CLIENT_SECRET=${{secrets.CLIENT_SECRET }} >> .env
              echo VITE_PROCEED_TO_AUTH_URI=${{secrets.PROCEED_TO_AUTH_URI }} >> .env
              echo VITE_FINNISH_AUTH_URI=${{secrets.FINNISH_AUTH_URI }} >> .env

         - name: Create .env file for Tauri
           run: |
              echo CLIENT_ID=${{ secrets.CLIENT_ID }} >> ./src-tauri/.env
              echo CLIENT_SECRET=${{ secrets.CLIENT_SECRET }} >> ./src-tauri/.env

         - name: install frontend dependencies
           run: pnpm install

         - name: Set RELEASE_BODY using GitHub API (Node.js)
           shell: bash
           env:
              GH_REPO: ${{ github.repository }}
              GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              GH_TAG: ${{ github.ref_name }}
           run: |
              node <<'EOF'
              const https = require('https');

              const headers = {
                 'User-Agent': 'GitHub Actions',
                 Authorization: 'Bearer process.env.GH_TOKEN',
              };

              function fetch(url) {
                 return new Promise((resolve, reject) => {
                 https.get(url, { headers }, (res) => {
                    let data = '';
                    res.on('data', (chunk) => (data += chunk));
                    res.on('end', () => resolve(JSON.parse(data)));
                 }).on('error', reject);
                 });
              }

              (async () => {
                 const refData = await fetch(`https://api.github.com/repos/${process.env.GH_REPO}/git/ref/tags/${process.env.GH_TAG}`);
                 const tagData = await fetch(refData.object.url);
                 const message = tagData.message || '';

                 const fs = require('fs');
                 fs.appendFileSync(process.env.GITHUB_ENV, `RELEASE_BODY<<EOF\n`);
                 fs.appendFileSync(process.env.GITHUB_ENV, message + '\n\n');
                 fs.appendFileSync(process.env.GITHUB_ENV, 'Download the appropriate installer for your system from the assets below.\n');
                 fs.appendFileSync(process.env.GITHUB_ENV, 'EOF\n');
              })();
              EOF

         - uses: tauri-apps/tauri-action@v0
           env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           with:
              tagName: ${{ github.ref_name }}
              releaseName: Task Bridge ${{ github.ref_name }}
              releaseBody: ${{ env.RELEASE_BODY }}
              releaseDraft: true
              #   releaseBody: "Download the appropriate installer for your system from the assets below."
              #   releaseDraft: false
              prerelease: false
              args: ${{ matrix.args }}
